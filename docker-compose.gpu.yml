services:
  # 模型下載服務（第一次啟動會下載模型檔案，完成後容器保持停止狀態）
  model-downloader:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-face-swap-model-downloader
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        if [ ! -f /app/models/inswapper_128.onnx ]; then
          echo '🔄 正在下載 AI 模型檔案...'
          mkdir -p /app/models
          
          # 嘗試第一個下載源
          echo '📥 嘗試從 HuggingFace 下載...'
          if wget --timeout=60 --tries=3 --progress=bar:force:noscroll -O /app/models/inswapper_128.onnx 'https://huggingface.co/spaces/mkrzyzan/face-swap/resolve/main/inswapper_128.onnx'; then
            # 安全獲取檔案大小
            if [ -f /app/models/inswapper_128.onnx ]; then
              FILE_SIZE=$$(stat -c%s /app/models/inswapper_128.onnx 2>/dev/null || echo \"0\")
              FILE_SIZE=$${FILE_SIZE:-0}
              echo \"📊 下載檔案大小: $$FILE_SIZE bytes\"
              
              # 驗證檔案大小（正常應該約為 256MB = 268435456 bytes）
              if [ $$FILE_SIZE -lt 200000000 ]; then
                echo '❌ 檔案太小，可能下載不完整，嘗試備用下載源...'
                rm -f /app/models/inswapper_128.onnx
                echo '📥 嘗試從 GitHub 下載...'
                wget --timeout=60 --tries=3 --progress=bar:force:noscroll -O /app/models/inswapper_128.onnx 'https://github.com/facefusion/facefusion-assets/releases/download/models/inswapper_128.onnx'
                if [ -f /app/models/inswapper_128.onnx ]; then
                  FILE_SIZE=$$(stat -c%s /app/models/inswapper_128.onnx 2>/dev/null || echo \"0\")
                  FILE_SIZE=$${FILE_SIZE:-0}
                  echo \"📊 備用源檔案大小: $$FILE_SIZE bytes\"
                }
              }
            }
          else
            echo '❌ 第一個下載源失敗，嘗試備用下載源...'
            echo '📥 嘗試從 GitHub 下載...'
            wget --timeout=60 --tries=3 --progress=bar:force:noscroll -O /app/models/inswapper_128.onnx 'https://github.com/facefusion/facefusion-assets/releases/download/models/inswapper_128.onnx'
            if [ -f /app/models/inswapper_128.onnx ]; then
              FILE_SIZE=$$(stat -c%s /app/models/inswapper_128.onnx 2>/dev/null || echo \"0\")
              FILE_SIZE=$${FILE_SIZE:-0}
              echo \"📊 備用源檔案大小: $$FILE_SIZE bytes\"
            }
          }
          
          # 最終驗證
          if [ -f /app/models/inswapper_128.onnx ]; then
            FILE_SIZE=$$(stat -c%s /app/models/inswapper_128.onnx 2>/dev/null || echo \"0\")
            FILE_SIZE=$${FILE_SIZE:-0}
            if [ $$FILE_SIZE -lt 200000000 ]; then
              echo '❌ 所有下載源都失敗或檔案損壞，請檢查網路連接'
              rm -f /app/models/inswapper_128.onnx
              exit 1
            else
              echo \"✅ AI 模型下載成功！檔案大小: $$FILE_SIZE bytes\"
              # 嘗試驗證檔案是否為有效的 ONNX 檔案
              if python3 -c \"import onnx; onnx.load('/app/models/inswapper_128.onnx'); print('✅ ONNX 檔案格式驗證通過')\" 2>/dev/null; then
                echo '✅ 模型檔案驗證完成'
              else
                echo '⚠️  無法驗證 ONNX 格式，但檔案大小正常'
              }
            }
          else
            echo '❌ 模型檔案下載失敗'
            exit 1
          }
          
          ls -lh /app/models/inswapper_128.onnx
        else
          echo '✅ AI 模型已存在，跳過下載'
          if [ -f /app/models/inswapper_128.onnx ]; then
            FILE_SIZE=$$(stat -c%s /app/models/inswapper_128.onnx 2>/dev/null || echo \"0\")
            FILE_SIZE=$${FILE_SIZE:-0}
            echo \"📊 現有檔案大小: $$FILE_SIZE bytes\"
            ls -lh /app/models/inswapper_128.onnx
          else
            echo '⚠️  模型檔案不存在，但目錄檢查顯示存在'
          }
        }
      "
    restart: "no"

  redis:
    image: redis:7-alpine
    container_name: ai-face-swap-redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    # Redis 調整配置
    command: redis-server
      --appendonly yes
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 2048
      --timeout 300
      --tcp-keepalive 60
      --maxclients 25000
      --hz 100
      --databases 16
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 5G
        reservations:
          memory: 3G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    image: docker.io/library/nginx:alpine
    container_name: ai-face-swap-frontend
    ports:
      - "8882:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./backend/results:/results:ro
    depends_on:
      - backend
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile.gpu  # 使用GPU版本的Dockerfile
    container_name: ai-face-swap-backend-gpu
    expose:
      - "3001"
    volumes:
      - ./backend:/app
    depends_on:
      - model-downloader
      - redis
    restart: unless-stopped
    # GPU 資源配置
    deploy:
      resources:
        limits:
          memory: 16G  # 提高到 16GB
        reservations:
          memory: 8G  # 提高到 8GB
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - REDIS_URL=redis://redis:6379/0
    # 無限排隊模式: 單 worker 避免重複
    command: [
      "python", "-m", "uvicorn", "app:app",
      "--host", "0.0.0.0",
      "--port", "3001",
      "--workers", "1",  # 單 worker - GPU 串行處理
      "--backlog", "65535",  # 最大化待處理連接隊列
      "--timeout-keep-alive", "600",  # Keep-alive timeout 10分鐘
      # 移除 limit-concurrency - 讓所有請求都能進來排隊
      # 移除 limit-max-requests - 避免壓測時自動重啟
      "--log-level", "warning"  # 減少日誌開銷
    ]

volumes:
  redis_data:

networks:
  default:
    name: ai-avatar-studio-network
